{
	"info": {
		"_postman_id": "1069debf-e019-43b6-b506-6ce792098651",
		"name": "TransMedia API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36760294"
	},
	"item": [
		{
			"name": "TC01-Add a New List",
			"item": [
				{
					"name": "Create New Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random board name\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Store the random board name in an environment variable\r",
									"pm.environment.set(\"randomBoardName\", generateRandomString(8) + \" Board\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Get the random board name from the environment variable\r",
									"const expectedBoardName = pm.environment.get(\"randomBoardName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualBoardName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualBoardName).to.eql(expectedBoardName);\r",
									"});\r",
									"\r",
									"/** Save ID **/\r",
									"// Get the board ID from the response body\r",
									"const boardID = jsonData.id;\r",
									"\r",
									"// Save the 'id' to an environment variable\r",
									"pm.environment.set(\"boardID\", boardID);\r",
									"\r",
									"// Log the id to the console for verification\r",
									"console.log(\"Board ID saved to environment:\", boardID);\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('user');\r",
									"    pm.expect(responseData).to.have.property('starred');\r",
									"    pm.expect(responseData).to.have.property('created');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.user).to.be.a('number');\r",
									"    pm.expect(responseData.user).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created date is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.created).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{randomBoardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/boards",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"boards"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Board ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Get the random board name from the environment variable\r",
									"const expectedBoardName = pm.environment.get(\"randomBoardName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualBoardName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualBoardName).to.eql(expectedBoardName);\r",
									"});\r",
									"\r",
									"// Get the board id from the environment variable\r",
									"const expectedBoardID = pm.environment.get(\"boardID\");\r",
									"\r",
									"// Extract the 'id' from the response\r",
									"const boardId = jsonData.id;\r",
									"\r",
									"// Test to check if the boardId is valid\r",
									"pm.test(\"Board ID is valid\", function () {\r",
									"    pm.expect(boardId).to.not.be.undefined;\r",
									"    pm.expect(boardId).to.not.be.null;\r",
									"    pm.expect(boardId).to.not.equal(\"\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the current boardID from the environment\r",
									"const currentBoardID = parseInt(pm.environment.get(\"boardID\"), 10);\r",
									"\r",
									"// Increment the boardID by 1 to generate an invalidBoardID\r",
									"const invalidBoardID = currentBoardID + 1;\r",
									"\r",
									"// Save the invalidBoardID to an environment variable\r",
									"pm.environment.set(\"invalidBoardID\", invalidBoardID);\r",
									"\r",
									"// Log the new invalidBoardID to the console for verification\r",
									"console.log(\"Invalid Board ID generated:\", invalidBoardID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/boards/{{boardID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'boardId' parameter is correctly passed in the request URL\", function () {",
									"    pm.expect(pm.request.url.query.get('boardId')).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/lists?boardId={{boardID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists"
							],
							"query": [
								{
									"key": "boardId",
									"value": "{{boardID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random list name\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Store the random list name in an environment variable\r",
									"pm.environment.set(\"randomListName\", generateRandomString(8) + \" List\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Get the random list name from the environment variable\r",
									"const expectedListName = pm.environment.get(\"randomListName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualListName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualListName).to.eql(expectedListName);\r",
									"});\r",
									"\r",
									"// Get the board ID from the environment variable\r",
									"const expectedBoardID = pm.environment.get(\"boardID\");\r",
									"\r",
									"// Get the board ID from the response body\r",
									"const actualBoardID = jsonData.boardId;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct board ID\", function () {\r",
									"    pm.expect(actualBoardID).to.eql(expectedBoardID);\r",
									"});\r",
									"\r",
									"/** Save ID **/\r",
									"// Get the list ID from the response body\r",
									"const listID = jsonData.id;\r",
									"\r",
									"// Save the 'id' to an environment variable\r",
									"pm.environment.set(\"listID\", listID);\r",
									"\r",
									"// Log the id to the console for verification\r",
									"console.log(\"List ID saved to environment:\", listID);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"boardId\":{{boardID}},\r\n    \"name\": \"{{randomListName}}\",\r\n    \"order\":0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/lists",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TC06-Delete the Newly Created List",
			"item": [
				{
					"name": "Delete List ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.eql({});",
									"});",
									"",
									"",
									"pm.test(\"Verify that the list with ID 17 is deleted from the database\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/17"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/lists/{{listID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists",
								"{{listID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Deleted List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the DELETE request was successful\r",
									"pm.test(\"List should not be available (404 Not Found)\", function () {\r",
									"    pm.expect(pm.response.to.have.status(404));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/17"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/lists/{{listID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists",
								"{{listID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TC07-Delete a Non-Existent List",
			"item": [
				{
					"name": "Create New Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random board name\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Store the random board name in an environment variable\r",
									"pm.environment.set(\"randomBoardName\", generateRandomString(8) + \" Board\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Get the random board name from the environment variable\r",
									"const expectedBoardName = pm.environment.get(\"randomBoardName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualBoardName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualBoardName).to.eql(expectedBoardName);\r",
									"});\r",
									"\r",
									"/** Save ID **/\r",
									"// Get the board ID from the response body\r",
									"const boardID = jsonData.id;\r",
									"\r",
									"// Save the 'id' to an environment variable\r",
									"pm.environment.set(\"boardID\", boardID);\r",
									"\r",
									"// Log the id to the console for verification\r",
									"console.log(\"Board ID saved to environment:\", boardID);\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('user');\r",
									"    pm.expect(responseData).to.have.property('starred');\r",
									"    pm.expect(responseData).to.have.property('created');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.user).to.be.a('number');\r",
									"    pm.expect(responseData.user).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created date is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.created).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{randomBoardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/boards",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"boards"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Board ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Get the random board name from the environment variable\r",
									"const expectedBoardName = pm.environment.get(\"randomBoardName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualBoardName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualBoardName).to.eql(expectedBoardName);\r",
									"});\r",
									"\r",
									"// Get the board id from the environment variable\r",
									"const expectedBoardID = pm.environment.get(\"boardID\");\r",
									"\r",
									"// Extract the 'id' from the response\r",
									"const boardId = jsonData.id;\r",
									"\r",
									"// Test to check if the boardId is valid\r",
									"pm.test(\"Board ID is valid\", function () {\r",
									"    pm.expect(boardId).to.not.be.undefined;\r",
									"    pm.expect(boardId).to.not.be.null;\r",
									"    pm.expect(boardId).to.not.equal(\"\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the current boardID from the environment\r",
									"const currentBoardID = parseInt(pm.environment.get(\"boardID\"), 10);\r",
									"\r",
									"// Increment the boardID by 1 to generate an invalidBoardID\r",
									"const invalidBoardID = currentBoardID + 1;\r",
									"\r",
									"// Save the invalidBoardID to an environment variable\r",
									"pm.environment.set(\"invalidBoardID\", invalidBoardID);\r",
									"\r",
									"// Log the new invalidBoardID to the console for verification\r",
									"console.log(\"Invalid Board ID generated:\", invalidBoardID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/boards/{{boardID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"boards",
								"{{boardID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random list name\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Store the random list name in an environment variable\r",
									"pm.environment.set(\"randomListName\", generateRandomString(8) + \" List\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Get the random list name from the environment variable\r",
									"const expectedListName = pm.environment.get(\"randomListName\");\r",
									"\r",
									"// Get the board name from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const actualListName = jsonData.name;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct name\", function () {\r",
									"    pm.expect(actualListName).to.eql(expectedListName);\r",
									"});\r",
									"\r",
									"// Get the board ID from the environment variable\r",
									"const expectedBoardID = pm.environment.get(\"boardID\");\r",
									"\r",
									"// Get the board ID from the response body\r",
									"const actualBoardID = jsonData.boardId;\r",
									"\r",
									"// Check if the name in the response matches the expected name\r",
									"pm.test(\"Verify that the response contains the correct board ID\", function () {\r",
									"    pm.expect(actualBoardID).to.eql(expectedBoardID);\r",
									"});\r",
									"\r",
									"/** Save ID **/\r",
									"// Get the list ID from the response body\r",
									"const listID = jsonData.id;\r",
									"\r",
									"// Save the 'id' to an environment variable\r",
									"pm.environment.set(\"listID\", listID);\r",
									"\r",
									"// Log the id to the console for verification\r",
									"console.log(\"List ID saved to environment:\", listID);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"boardId\":{{boardID}},\r\n    \"name\": \"{{randomListName}}\",\r\n    \"order\":0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/lists",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'boardId' parameter is correctly passed in the request URL\", function () {",
									"    pm.expect(pm.request.url.query.get('boardId')).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Extract and save the last list ID\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.environment.set(\"lastListId\", responseData[responseData.length - 1].id);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/lists?boardId={{boardID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists"
							],
							"query": [
								{
									"key": "boardId",
									"value": "{{boardID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Non-Existent List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 - List Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Increment the boardID by 1 to generate an invalidBoardID\r",
									"const invalidListID = lastListId + 1;\r",
									"\r",
									"// Save the invalidBoardID to an environment variable\r",
									"pm.environment.set(\"invalidListID\", invalidListID);\r",
									"\r",
									"// Log the new invalidBoardID to the console for verification\r",
									"console.log(\"Invalid List ID generated:\", invalidListID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/board/17"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Android\""
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/lists/{{invalidListID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"lists",
								"{{invalidListID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Board List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Extract and save the last board ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check if the response is an array\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"\r",
							"    // Get the last board in the array\r",
							"    var lastBoard = jsonData[jsonData.length - 1];\r",
							"    \r",
							"    // Ensure there is at least one board and it has an ID\r",
							"    if (lastBoard && lastBoard.id) {\r",
							"        pm.environment.set(\"currentboardid\", lastBoard.id);\r",
							"        console.log(\"Current Board ID saved as environment variable: \" + lastBoard.id);\r",
							"    } else {\r",
							"        pm.expect.fail(\"No boards found or last board has no ID.\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Referer",
						"value": "http://localhost:3000/"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Mobile Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?1"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"Android\""
					}
				],
				"url": {
					"raw": "{{baseURL}}/api/boards",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"boards"
					]
				}
			},
			"response": []
		}
	]
}